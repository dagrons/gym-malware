import os
import sys
import joblib
from sklearn.externals import joblib
import zerorpc

from gym_malware.envs.utils.pefeatures import PEFeatureExtractor


module_path = os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))
SAMPLE_PATH = os.path.join(module_path, 'samples')

local_model = joblib.load(os.path.join(
    module_path, 'gym_malware/envs/utils/gradient_boosting.pkl'))
local_model_threshold = 0.90

feature_extractor = PEFeatureExtractor()


class GradientBoostingServer(object):

    def get_score_local(self, bytez):
        # extract features
        features = feature_extractor.extract(bytez)
        print(features.shape)

        # query the model
        # predict on single sample, get the malicious score
        score = local_model.predict_proba(features.reshape(1, -1))[0, -1]
        return score, features.tolist()

    def get_label_local(self, bytez):
        # mimic black box by thresholding here
        score, features = self.get_score_local(bytez)
        label = float(self.get_score_local(bytez) >= local_model_threshold)
        print("score={} (hidden), label={}".format(score, label))
        return label, features

    def get_model_threshold(self):
        return local_model_threshold


s = zerorpc.Server(GradientBoostingServer())

s.bind("tcp://127.0.0.1:4243")
s.run()
